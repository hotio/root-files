#!/command/with-contenv bash
# shellcheck shell=bash

# shellcheck source=/dev/null
source /etc/s6-overlay/scripts/pia-functions
source /etc/s6-overlay/scripts/general-functions

umask "${UMASK}"

if [[ ${VPN_ENABLED} == "true" ]] && [[ ! -d "${CONFIG_DIR}/wireguard/" ]]; then
    mkdir "${CONFIG_DIR}/wireguard"
    find "${CONFIG_DIR}/wireguard" -maxdepth 0 \( ! -user hotio -or ! -group hotio \) -exec chown hotio:hotio {} +
fi

if [[ ${VPN_ENABLED} == "true" ]]; then
    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Setting nameserver to [1.1.1.1] until Unbound starts."
    echo "nameserver 1.1.1.1" > "/etc/resolv.conf"
fi

if [[ ${VPN_ENABLED} == "true" ]] && [[ ${VPN_PROVIDER} == "pia" ]]; then
    download_pia_wg
fi

if [[ ${VPN_ENABLED} == "true" ]]; then
    if ! capsh --print | grep -q "Current:.*cap_net_admin"; then
        echo "[ERR] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] [--cap-add=NET_ADMIN] is not set or running with [--privileged=true]. Exiting..."
        echo "Add: --cap-add=NET_ADMIN"
        echo "Remove: --privileged=true"
        exit 1
    fi

    unset rp_filter_strict
    for file in /proc/sys/net/ipv4/conf/*; do
        [[ "$(cat "/proc/sys/net/ipv4/conf/${file##*/}/rp_filter")" != "0" ]] && rp_filter_strict="true"
    done
    if [[ "${rp_filter_strict}" == "true" ]] && [[ "$(cat /proc/sys/net/ipv4/conf/all/src_valid_mark)" != "1" ]]; then
        echo "[ERR] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] [--sysctl=\"net.ipv4.conf.all.src_valid_mark=1\"] is not set and [rp_filter] is set to [strict]. Exiting..."
        echo "Add: --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\""
        exit 1
    fi
    sed -i "s:.*sysctl -q net.ipv4.conf.all.src_valid_mark=1.*::" /usr/bin/wg-quick

    if [[ "$(cat /proc/sys/net/ipv6/conf/all/disable_ipv6)" != "1" ]]; then
        echo "[WRN] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] [--sysctl=\"net.ipv6.conf.all.disable_ipv6=1\"] is not set. Consider disabling ipv6."
        echo "Add: --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\""
    fi

    if ip a show docker0 up > /dev/null 2>&1; then
        echo "[ERR] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Docker network type [host] is not supported with VPN enabled. Exiting..."
        echo "Use: bridge (preferably custom)"
        exit 1
    fi

    if [[ "${VPN_FIREWALL_TYPE}" == "legacy" ]] || ( ! grep -q nf_tables < /proc/modules && [[ "${VPN_FIREWALL_TYPE}" != "nftables" ]] ); then
        echo "[WRN] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Falling back to [iptables], removing package [nftables]..."
        if grep -q alpine < /etc/os-release; then
            apk del nftables > /dev/null 2>&1
        else
            apt purge -y nftables > /dev/null 2>&1
        fi
    fi

    [[ -f "${CONFIG_DIR}/wireguard/${VPN_CONF}-pre.sh" ]] && bash "${CONFIG_DIR}/wireguard/${VPN_CONF}-pre.sh"

    if [[ ! -f "${CONFIG_DIR}/wireguard/${VPN_CONF}.conf" ]]; then
        echo "[ERR] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Configuration file [${CONFIG_DIR}/wireguard/${VPN_CONF}.conf] was not found. Exiting..."
        exit 1
    else
        dos2unix -q -n "${CONFIG_DIR}/wireguard/${VPN_CONF}.conf" "/dev/shm/${VPN_CONF}.conf"
        chmod 600 "/dev/shm/${VPN_CONF}.conf"
        if [[ "${VPN_CONF}" == *"-fix" ]]; then
            sed -i 's#0.0.0.0/0#0.0.0.0/1,128.0.0.0/1#g' "/dev/shm/${VPN_CONF}.conf" # Synology Fix
        fi
        sed -i 's:DNS:#DNS:g' "/dev/shm/${VPN_CONF}.conf"
    fi

    if wg-quick down "/dev/shm/${VPN_CONF}.conf" > /dev/null 2>&1; then
        echo "[WRN] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] WireGuard is still running. Stopping WireGuard..."
        sleep 5
    fi

    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Starting WireGuard..."
    if wg-quick up "/dev/shm/${VPN_CONF}.conf"; then
        echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] WireGuard is started."
    else
        echo "[ERR] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] WireGuard failed to start!"
        exit 1
    fi

    while true; do
        if ip a show "${VPN_CONF}" up > /dev/null 2>&1; then
            break
        else
            echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Waiting for [${VPN_CONF}] interface to come online."
            sleep 5
        fi
    done

    set -e

    vpn_endpoint=$(wg show | grep endpoint: | awk '{print $2}')
    if [[ -z ${vpn_endpoint} ]]; then
        echo "[ERR] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] WireGuard [${VPN_CONF}] endpoint not found!"
        exit 1
    fi
    vpn_endpoint_ip="${vpn_endpoint%:*}"
    vpn_endpoint_port="${vpn_endpoint##*:}"
    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] WireGuard [${VPN_CONF}] endpoint [${vpn_endpoint_ip}][${vpn_endpoint_port}]."

    vpn_allowedips=$(wg show | grep 'allowed ips:' | awk -F ': ' '{print $2}')
    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] WireGuard [${VPN_CONF}] allowed ips [${vpn_allowedips// /}]."

    nw_default=$(ip -o -4 route show to default)
    nw_interface=$(awk '{print $5}' <<< "${nw_default}")
    nw_gateway=$(awk '{print $3}' <<< "${nw_default}")
    networks="$(ip -o -4 route show proto kernel | grep -v "${VPN_CONF}")"
    while IFS= read -r network; do
        default_note="         "
        [[ "$(awk '{print $3}' <<< "${network}")" == "${nw_interface}" ]] && default_ip=$(awk '{print $7}' <<< "${network}") && default_note="[default]"
        echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Network ${default_note}[$(awk '{print $3}' <<< "${network}")][$(awk '{print $7}' <<< "${network}")][$(awk '{print $1}' <<< "${network}")]."
    done <<< "${networks}"

    IFS=',' read -ra lan_networks <<< "${VPN_LAN_NETWORK%,}"
    for lan_network in "${lan_networks[@]}"; do
        ip route add "${lan_network}" via "${nw_gateway}" dev "${nw_interface}"
        echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Added [${lan_network}][LAN] as route via interface [${nw_interface}]."
    done

    if [[ "${VPN_CONF}" == *"-fix" ]]; then
        ip route add "${vpn_endpoint_ip}" via "${nw_gateway}" dev "${nw_interface}"
        echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Added [${vpn_endpoint_ip}][${VPN_CONF}] as route via interface [${nw_interface}]."
    fi

    IFS=',' read -ra ports <<< "${WEBUI_PORTS%,}"
    for port in "${ports[@]}"; do
        open_ports+="${port},"
    done
    IFS=',' read -ra ports <<< "${VPN_EXPOSE_PORTS_ON_LAN%,}"
    for port in "${ports[@]}"; do
        open_ports+="${port},"
    done
    IFS=',' read -ra ports <<< "${open_ports%,}"
    for port in "${ports[@]}"; do
        grep -q "${port}" <<< "${VPN_AUTO_PORT_FORWARD_TO_PORTS}" && continue
        closed_ports+="${port},"
    done
    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Ports opened on [${nw_interface}] are [${open_ports%,}]."
    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Ports closed on [${VPN_CONF}] are [${closed_ports%,}]."
    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Ports redirected on [${VPN_CONF}] are [${VPN_AUTO_PORT_FORWARD_TO_PORTS%,}]."

    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Routes overview:"
    ip route

    unset ipv6_wanted
    for file in /proc/sys/net/ipv6/conf/*; do
        [[ "$(cat "/proc/sys/net/ipv6/conf/${file##*/}/disable_ipv6")" == "0" ]] && ipv6_wanted="true"
    done

    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Added firewall rules:"
    if ! type nft > /dev/null 2>&1; then
        # Defaults
        iptables -P FORWARD DROP
        iptables -P INPUT DROP
        iptables -P OUTPUT DROP

        # INPUT
        IFS=',' read -ra additional_ports <<< "${open_ports%,}"
        for additional_port in "${additional_ports[@]}"; do
            iptables -A INPUT -i "${nw_interface}" -p "${additional_port##*/}" --dport "${additional_port%/*}" -d "${default_ip}" -j ACCEPT
            grep -q "${additional_port}" <<< "${VPN_AUTO_PORT_FORWARD_TO_PORTS}" && continue
            iptables -I INPUT -i "${VPN_CONF}" -p "${additional_port##*/}" --dport "${additional_port%/*}" -j DROP
        done
        while IFS= read -r network; do
            nw_if=$(awk '{print $3}' <<< "${network}")
            nw_cidr=$(awk '{print $1}' <<< "${network}")
            nw_ip=$(awk '{print $7}' <<< "${network}")
            iptables -A INPUT -i "${nw_if}" -s "${nw_cidr}" -d "${nw_ip}" -j ACCEPT
        done <<< "${networks}"
        if [[ ${VPN_LAN_LEAK_ENABLED} == "true" ]]; then
            IFS=',' read -ra lan_networks <<< "${VPN_LAN_NETWORK%,}"
            for lan_network in "${lan_networks[@]}"; do
                iptables -A INPUT -i "${nw_interface}" -s "${lan_network}" -d "${default_ip}" -j ACCEPT
            done
        fi
        iptables -A INPUT -i "${VPN_CONF}" -j ACCEPT
        iptables -A INPUT -i lo -j ACCEPT
        iptables -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT
        ipcalc -4 -c "${vpn_endpoint_ip}" && iptables -A INPUT -i "${nw_interface}" -p udp --sport "${vpn_endpoint_port}" -d "${default_ip}" -s "${vpn_endpoint_ip}" -j ACCEPT

        # OUTPUT
        IFS=',' read -ra additional_ports <<< "${open_ports%,}"
        for additional_port in "${additional_ports[@]}"; do
            iptables -A OUTPUT -o "${nw_interface}" -p "${additional_port##*/}" --sport "${additional_port%/*}" -s "${default_ip}" -j ACCEPT
            grep -q "${additional_port}" <<< "${VPN_AUTO_PORT_FORWARD_TO_PORTS}" && continue
            iptables -I OUTPUT -o "${VPN_CONF}" -p "${additional_port##*/}" --sport "${additional_port%/*}" -j DROP
        done
        while IFS= read -r network; do
            nw_if=$(awk '{print $3}' <<< "${network}")
            nw_cidr=$(awk '{print $1}' <<< "${network}")
            nw_ip=$(awk '{print $7}' <<< "${network}")
            iptables -A OUTPUT -o "${nw_if}" -s "${nw_ip}" -d "${nw_cidr}" -j ACCEPT
        done <<< "${networks}"
        if [[ ${VPN_LAN_LEAK_ENABLED} == "true" ]]; then
            IFS=',' read -ra lan_networks <<< "${VPN_LAN_NETWORK%,}"
            for lan_network in "${lan_networks[@]}"; do
                iptables -A OUTPUT -o "${nw_interface}" -s "${default_ip}" -d "${lan_network}" -j ACCEPT
            done
        fi
        iptables -A OUTPUT -o "${VPN_CONF}" -j ACCEPT
        iptables -A OUTPUT -o lo -j ACCEPT
        iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
        ipcalc -4 -c "${vpn_endpoint_ip}" && iptables -A OUTPUT -o "${nw_interface}" -p udp --dport "${vpn_endpoint_port}" -s "${default_ip}" -d "${vpn_endpoint_ip}" -j ACCEPT

        # Show result
        iptables -S

        if [[ ${ipv6_wanted} == "true" ]]; then
            # Defaults
            ip6tables -P FORWARD DROP
            ip6tables -P INPUT DROP
            ip6tables -P OUTPUT DROP

            # INPUT
            IFS=',' read -ra additional_ports <<< "${open_ports%,}"
            for additional_port in "${additional_ports[@]}"; do
                grep -q "${additional_port}" <<< "${VPN_AUTO_PORT_FORWARD_TO_PORTS}" && continue
                ip6tables -I INPUT -i "${VPN_CONF}" -p "${additional_port##*/}" --dport "${additional_port%/*}" -j DROP
            done
            ip6tables -A INPUT -i "${VPN_CONF}" -j ACCEPT
            ip6tables -A INPUT -p ipv6-icmp --icmpv6-type echo-reply -j ACCEPT

            # OUTPUT
            IFS=',' read -ra additional_ports <<< "${open_ports%,}"
            for additional_port in "${additional_ports[@]}"; do
                grep -q "${additional_port}" <<< "${VPN_AUTO_PORT_FORWARD_TO_PORTS}" && continue
                ip6tables -I OUTPUT -o "${VPN_CONF}" -p "${additional_port##*/}" --sport "${additional_port%/*}" -j DROP
            done
            ip6tables -A OUTPUT -o "${VPN_CONF}" -j ACCEPT
            ip6tables -A OUTPUT -p ipv6-icmp --icmpv6-type echo-request -j ACCEPT

            # Show result
            ip6tables -S
        fi
    else
        # Create chains
        nft add table inet hotio
        nft add chain inet hotio forward    '{ type filter hook forward    priority 0 ; policy drop; }'
        nft add chain inet hotio input      '{ type filter hook input      priority 0 ; policy drop; }'
        nft add chain inet hotio output     '{ type filter hook output     priority 0 ; policy drop; }'
        nft add chain inet hotio prerouting '{ type nat    hook prerouting priority -100 ; }'

        # Create input rules
        IFS=',' read -ra additional_ports <<< "${open_ports%,}"
        for additional_port in "${additional_ports[@]}"; do
            nft add rule inet hotio input iifname "${nw_interface}" "${additional_port##*/}" dport "${additional_port%/*}" ip daddr "${default_ip}" counter accept
            grep -q "${additional_port}" <<< "${VPN_AUTO_PORT_FORWARD_TO_PORTS}" && continue
            nft add rule inet hotio input iifname "${VPN_CONF}" "${additional_port##*/}" dport "${additional_port%/*}" counter drop
        done
        while IFS= read -r network; do
            nw_if=$(awk '{print $3}' <<< "${network}")
            nw_cidr=$(awk '{print $1}' <<< "${network}")
            nw_ip=$(awk '{print $7}' <<< "${network}")
            nft add rule inet hotio input iifname "${nw_if}" ip saddr "${nw_cidr}" ip daddr "${nw_ip}" counter accept
        done <<< "${networks}"
        if [[ ${VPN_LAN_LEAK_ENABLED} == "true" ]]; then
            IFS=',' read -ra lan_networks <<< "${VPN_LAN_NETWORK%,}"
            for lan_network in "${lan_networks[@]}"; do
                nft add rule inet hotio input iifname "${nw_interface}" ip saddr "${lan_network}" ip daddr "${default_ip}" counter accept
            done
        fi
        nft add rule inet hotio input iifname "${VPN_CONF}" counter accept
        nft add rule inet hotio input iifname "lo" counter accept
        nft add rule inet hotio input icmp type echo-reply counter accept
        nft add rule inet hotio input icmpv6 type echo-reply counter accept
        ipcalc -4 -c "${vpn_endpoint_ip}" && nft add rule inet hotio input iifname "${nw_interface}" ip daddr "${default_ip}" ip saddr "${vpn_endpoint_ip}" udp sport "${vpn_endpoint_port}" counter accept

        # Create output rules
        IFS=',' read -ra additional_ports <<< "${open_ports%,}"
        for additional_port in "${additional_ports[@]}"; do
            nft add rule inet hotio output oifname "${nw_interface}" "${additional_port##*/}" sport "${additional_port%/*}" ip saddr "${default_ip}" counter accept
            grep -q "${additional_port}" <<< "${VPN_AUTO_PORT_FORWARD_TO_PORTS}" && continue
            nft add rule inet hotio output oifname "${VPN_CONF}" "${additional_port##*/}" sport "${additional_port%/*}" counter drop
        done
        while IFS= read -r network; do
            nw_if=$(awk '{print $3}' <<< "${network}")
            nw_cidr=$(awk '{print $1}' <<< "${network}")
            nw_ip=$(awk '{print $7}' <<< "${network}")
            nft add rule inet hotio output oifname "${nw_if}" ip saddr "${nw_ip}" ip daddr "${nw_cidr}" counter accept
        done <<< "${networks}"
        if [[ ${VPN_LAN_LEAK_ENABLED} == "true" ]]; then
            IFS=',' read -ra lan_networks <<< "${VPN_LAN_NETWORK%,}"
            for lan_network in "${lan_networks[@]}"; do
                nft add rule inet hotio output oifname "${nw_interface}" ip saddr "${default_ip}" ip daddr "${lan_network}" counter accept
            done
        fi
        nft add rule inet hotio output oifname "${VPN_CONF}" counter accept
        nft add rule inet hotio output oifname "lo" counter accept
        nft add rule inet hotio output icmp type echo-request counter accept
        nft add rule inet hotio output icmpv6 type echo-request counter accept
        ipcalc -4 -c "${vpn_endpoint_ip}" && nft add rule inet hotio output oifname "${nw_interface}" ip saddr "${default_ip}" ip daddr "${vpn_endpoint_ip}" udp dport "${vpn_endpoint_port}" counter accept

        # List rules
        nft -s list table inet hotio
    fi

    set +e

    [[ -f "${CONFIG_DIR}/wireguard/${VPN_CONF}-post.sh" ]] && bash "${CONFIG_DIR}/wireguard/${VPN_CONF}-post.sh"

    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Performing internet connectivity tests..."

    ping4=$(ping -c 5 1.1.1.1 2> /dev/null | tail -1 | awk -F ' = ' '{print $2}')
    if [[ -z ${ping4} ]]; then
        echo "[ERR] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] [IPV4] Ping test failed!"
        [[ ${VPN_HEALTHCHECK_ENABLED} == "true" ]] && exit 1
    else
        echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] [IPV4] [PING: ${ping4}]"
    fi

    ip4=$(curl -fsL -4 --retry 5 --retry-max-time 60 --max-time 10 wtfismyip.com/json | jq -re '"[\(.YourFuckingLocation)] [\(.YourFuckingISP)] [\(.YourFuckingIPAddress)]"')
    if [[ -z ${ip4} ]]; then
        echo "[ERR] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] [IPV4] IP lookup failed!"
        [[ ${VPN_HEALTHCHECK_ENABLED} == "true" ]] && exit 1
    else
        echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] [IPV4] ${ip4}"
    fi

    if [[ ${ipv6_wanted} == "true" ]]; then
        ping6=$(ping6 -c 5 2606:4700:4700::1111 2> /dev/null | tail -1 | awk -F ' = ' '{print $2}')
        if [[ -z ${ping6} ]]; then
            echo "[ERR] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] [IPV6] Ping test failed!"
            [[ ${VPN_HEALTHCHECK_ENABLED} == "true" ]] && exit 1
        else
            echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] [IPV6] [PING: ${ping6}]"
        fi
        ip6=$(curl -fsL -6 --retry 5 --retry-max-time 60 --max-time 10 wtfismyip.com/json | jq -re '"[\(.YourFuckingLocation)] [\(.YourFuckingISP)] [\(.YourFuckingIPAddress)]"')
        if [[ -z ${ip6} ]]; then
            echo "[ERR] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] [IPV6] IP lookup failed!"
            [[ ${VPN_HEALTHCHECK_ENABLED} == "true" ]] && exit 1
        else
            echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] [IPV6] ${ip6}"
        fi
    fi
fi

exit 0
